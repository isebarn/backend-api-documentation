openapi: 3.0.0
servers:
  - url: 'https://staging2.api.claps.ai/v1'
    description: stagging end-point
  - url: 'https://api.claps.ai/v1'
    description: production end-point
  - url: 'https://development.api.claps.ai/v1'
    description: development end-point
security:
  - apiKey: []
info:
  contact:
    name: dev@claps.ai
    url: 'https://docs.api.claps.ai/'
  description: |
    Interact with Claps API.

    Spec can be found at: https://docs.api.claps.ai/openapi.yaml
    
    When a user was deactivated or deleted, backend will response with one of those status codes:
    
    **User was deleted**:
    
    HTTP Response code 451: User doesn't exist
    
    **User was deactivated**:
    
    HTTP Response code 422: This user is deactivated
    

  license:
    name: Creative Commons Attribution 3.0
    url: 'https://creativecommons.org/licenses/by/3.0/'
  termsOfService: 'https://claps.ai/legal/'
  title: Claps API
  version: v3
  x-logo:
    url: 'https://avatars.githubusercontent.com/u/77606001?s=200&v=4'
  x-preferred: true
  x-providerName: staging2.api.claps.ai
tags:
  - name: health-check
  - name: tribes
  - name: notifications
  - name: user
  - name: videos
  - name: re
    description: recommendation engine
  - name: slides
    description: |
      Manage Slides.

      All endpoints to `CRUD` any resources

      **Note** By default the server does **not** return referenced (nested) documents

      ## How to return referenced (nested) documents: Example
      Objects of type `action` the following

      ```
      {
        "id": "some_object_id",
        "timestamp": 0
        "structure": "some_object_id"
      }
      ```

      running
      ```GET v1/slides/models/action``` will return a list of all actions
      and returns a list of objects similar to

      ```
      {
        "id": "62e934de4aaf707b58bbd9cc",
        "structure": {
          "id": "62e934dd4aaf707b58bbd9c9"
        },
        "timestamp": 0
      }  
      ```    


      running
      ```GET v1/slides/models/action?$include=structure``` will return a list of all actions
      and dereferencing all the structure objects, returning something like

      ```
      {
        "id": "62e934de4aaf707b58bbd9cc",
        "structure": {
          "id": "62e934dd4aaf707b58bbd9c9",
          "name": "Slide 1",
          "title": "Welcome"
        },
        "timestamp": 0
      }      
      ```


      ## How to filter documents

      ### Filtering documents w.r.t a property
      ``` GET v1/slides/models/action?timestamp=5000 ```
      
      ### Filtering documents w.r.t a nested property
      ``` GET v1/slides/models/action?structure__title=Welcome ```

      ## How to limit results
      ``` GET v1/slides/models/action?$limit=10 ```

      ## How to skip results
      ``` GET v1/slides/models/action?$skip=10 ```

      ## How to paginate
      ``` GET v1/slides/models/action?$skip=10&limit=10 ```

      # How to upload an image to a structure that supports images
      For example `structure_1`

      ```
      POST v1/models/structure_1
      {
          "name": "Slide 1",
          "title": "Welcome"  
      }     
      ```
      returns
      ```
      {
        "id": "some_object_id"
        "name": "string",
        "image": "image_object_id", <- you need this
      }      
      ```

      ```
      POST v1/gcp/images/<image_object_id>
      data=binary_image
      ```

      Then you can call
      `GET v1/gcp/images/<image_object_id>`
      Which will redirect to the gcp image object

      # How to upload a video for an slides object
      ```
      POST v1/models/slide
      {
          "colors": { ... }
          .
          .
      }     
      ```
      returns
      ```
      {
        "id": "some_object_id"
        "colors": {},
        "vode": "video_object_id", <- you need this
      }      
      ```

      ```
      POST v1/gcp/videos/<video_object_id>
      data=binary_video
      ```

      Then you can call
      `GET v1/gcp/videos/<video_object_id>`
      Which will redirect to the gcp video object


paths:
  /health-check:
    get:
      description: Health check end point
      operationId: Health Check
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
      tags:
        - health-check

  /health-check-auth:
    get:
      security:
        - DeviceId: []
      description: Health check end point that requires authentication
      operationId: Health Check Authenticated
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
      tags:
        - health-check

  /notifications/mark-as-read/${NotificationId}:
    get:
      description: Mark as read a notification
      operationId: Mark a Notification as Read
      parameters:
        - description: Unique Notification ID
          in: path
          name: NotificationId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not the owner of notification
        '204':
          description: Notification not found
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Invalid message format of missing 'NotificationID'

      tags:
        - notifications

  /notifications:
    get:
      security:
        - DeviceId: [ ]
      description: |
            # List pending notifications summary.

            Each notification returns a 'type of notification' (as an integer) depending of the type you must get notification details at the custom end-point:

            ## Notification types and end-points of details

            ### Type: 1

            - Description: An user was accepted into a tribe. This message is received user that was accepted into the tribe.
            - Detailed end-point: /notifications/new-accepted-into-tribe

            ### Type: 2

            - Description: An user requested access to a tribe. This message is received by a tribe owner.
            - Detailed end-point: /notifications/new-access-request-to-tribe

            ### Type: 3

            - Description: New tribe member. This message was received to all tribe members.
            - Detailed end-point: /notifications/new-tribe-video

            ### Type: 4

            - Description: New video in a tribe. This message was received to all tribe members.
            - Detailed end-point: /notifications/new-tribe-video

            ### Type: 5

            - Description: New user video. This message was received to all user followers.
            - Detailed end-point: /notifications/new-user-video

      parameters:
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
            maximum: 500
      operationId: Pending user Notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationsSummaryResponse'
          description: Successful response
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Authentication required

      tags:
        - notifications

  /notifications/new-accepted-into-tribe:
    get:
      security:
        - DeviceId: [ ]
      description:  User get this notification when is accepted into a new tribe
      operationId: Accepted Users Into a Tribe
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserAcceptedResponse'
          description: Successful response

      tags:
        - notifications

  /notifications/new-access-request-to-tribe:
    get:
      security:
        - DeviceId: [ ]
      description:  Tribe owner receives this notification when a new user want to access to the tribe and sends a new request request to the tribe
      operationId: New User Access Request
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationUserAccessRequestResponse'
          description: Successful response
      tags:
        - notifications

  /notifications/new-tribe-member:
    get:
      security:
        - DeviceId: [ ]
      description: All tribe users receive this notification when a new member has become into the tribe
      operationId: New Member in Tribe
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationNewMemberInTribeResponse'
          description: Successful response
      tags:
        - notifications

  /notifications/new-tribe-video:
    get:
      security:
        - DeviceId: [ ]
      description: |
        All tribe users receive this notification when a member shared a new video into the tribe.

        This end-point returns a summary of all information to be displayed in the UI.

        If you want to get the video you must call to end-point: /video/{VIDEO-ID}

      operationId: New Tribe Video
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationNewVideoInTribeResponse'
          description: Successful response
      tags:
        - notifications

  /notifications/new-user-video:
    get:
      security:
        - DeviceId: [ ]
      description: |
        All user's followers receive this notification when a the user shared a new video into their personal feed.

        This end-point returns a summary of all information to be displayed in the UI.

        If you want to get the video you must call to end-point: /video/{VIDEO-ID}

      operationId: New User Video
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationNewUserVideoResponse'
          description: Successful response
      tags:
        - notifications

  /user/profile/{UserId}:
    get:
      description: Get public profile for a given user, by their UserId
      operationId: Get User Profile by ID
      parameters:
        - description: Unique User ID
          in: path
          name: UserId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePublicProfile'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found

      tags:
        - user

  /user/me:
    get:
      description: Get user profile
      operationId: Get User Me
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePublicProfile'
          description: Successful response

      tags:
        - user

  /user/deactivate:
    get:
      description: Deactivate user
      operationId: DeActivateUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response

      tags:
        - user

  /user/reactivate:
    get:
      description: Reactivate deactivated user
      operationId: ReActivateUser
      parameters:
        - description: Device ID
          in: header
          name: DeviceId
          schema:
            type: string
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Device-Id header missing

      tags:
        - user

  /user/delete:
    get:
      description: Delete User
      operationId: DeleteUser
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response

      tags:
        - user

  /user/profile/nick/{Nick}:
    get:
      description: Get public profile for a given user, by their UserId
      operationId: Get User Profile by Nick
      parameters:
        - description: Unique User Nick
          in: path
          name: Nick
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponsePublicProfile'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found

      tags:
        - user

  /user/profile:
    post:
      security:
        - DeviceId: [ ]
      description: Update user public profile
      operationId: Update User Profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequestProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Some error was occurred. It can't updated your profile
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Invalid request
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: New nick already was chosen by other user
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Some internal error was occurred
      tags:
        - user

  /user/profile/photo:
    post:
      security:
        - DeviceId: [ ]
      description: |
        Change user profile photo. The process has two steps:

        1. Call this end-point
        2. This end-point returns an upload url. You must use then to upload the new image to them.
      operationId: Update User Photo
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResourceResponse'
          description: Successful response
      tags:
        - user

  /user/followers/{UserId}:
    get:
      description: Get User Followers
      operationId: Get User Followers
      parameters:
        - description: Unique User Id
          in: path
          name: UserId
          required: true
          schema:
            type: string
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowerResponse'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
      tags:
        - user

  /user/followers/me:
    get:
      description: Get Me User Followers
      operationId: Get Me Followers
      parameters:
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowerResponse'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
      tags:
        - user

  /user/following/{UserId}:
    get:
      description: Get the users that an User is following
      operationId: Get User Following
      parameters:
        - description: Unique User Id
          in: path
          name: UserId
          required: true
          schema:
            type: string
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowerResponse'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
      tags:
        - user

  /user/following/me:
    get:
      description: Get who I'm following
      operationId: Get Me User Following
      parameters:
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FollowerResponse'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
      tags:
        - user

  /user/follow/{UserId}:
    get:
      security:
        - DeviceId: [ ]
      description: Follow an User
      operationId: Follow an User
      parameters:
        - description: Unique User ID
          in: path
          name: UserId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You already follow this user
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User doesn't exits
      tags:
        - user

  /user/follow/{UserId}/followed:
    get:
      security:
        - DeviceId: [ ]
      description: Checks if you follow a user
      operationId: CheckFollowUser
      parameters:
        - description: Unique User ID
          in: path
          name: UserId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowedResponse'
          description: Returns if an user is followed or not
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You cannot follow yourself
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User doesn't exits

      tags:
        - user

  /user/unfollow/${UserId}:
    get:
      security:
        - DeviceId: [ ]
      description: UnFollow an User
      operationId: UnFollow an User
      parameters:
        - description: Unique User ID
          in: path
          name: UserId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You don't follow this user
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User doesn't exits

      tags:
        - user

  /tribes/create:
    post:
      security:
        - DeviceId: [ ]
      description: Create a new tribe
      operationId: Create a New Tribe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TribeCreatePublicInfoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TribeCreateResponse'
          description: Successful response
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Already exits a tribe with this name
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFormResponseMessage'
          description: Successful response
      tags:
        - tribes

  /tribes/public-photo/{TribeId}:
    post:
      security:
        - DeviceId: [ ]
      description: |
        Change Tribe profile photo. The process has two steps:

        1. Call this end-point
        2. This end-point returns an upload url. You must use then to upload the new image to them.
      operationId: New Tribe Photo
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResourceResponse'
          description: Successful response
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResourceResponse'
          description: Only tribe owner can change the tribe photo
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResourceResponse'
          description: Tribe not found
      tags:
        - tribes

  /tribes/join/{TribeId}:
    get:
      security:
        - DeviceId: [ ]
      description: Join into a tribe
      operationId: Join into Tribe
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe is private, must must request access to them
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe not found
      tags:
        - tribes

  /tribes/make-public/{TribeId}:
    get:
      security:
        - DeviceId: [ ]
      description: Make a private tribe public. Only owner can do this.
      operationId: Make Public
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe is already public. Nothing to do
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not the owner of the tribe
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe not found
      tags:
        - tribes

  /tribes/leave/{TribeId}:
    get:
      security:
        - DeviceId: [ ]
      description: Leave a tribe
      operationId: Leave a Tribe
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not part of the tribe or they doesn't exits
      tags:
        - tribes

  /tribes/public-info/{TribeId}:
    post:
      security:
        - DeviceId: [ ]
      description: Update tribe public information by the owner
      operationId: Update Public Info
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
            maxLength: 80
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TribeUpdatePublicInfoRequest'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Already exits a tribe with this name
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFormResponseMessage'
          description: Invalid request
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFormResponseMessage'
          description: You're not the owner of the tribe or tribe doesn't exits
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidFormResponseMessage'
          description: Tribe not found
      tags:
        - tribes

    get:
      description: Get public information from a Tribe
      operationId: Get Public Tribe Info
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
            maxLength: 80
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TribeUpdatePublicInfoResponse'
          description: Successful response
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResponseMessage"
      tags:
        - tribes

  /tribes/request-access/{TribeId}:
    get:
      security:
        - DeviceId: [ ]
      description: Request access to a private Tribe
      operationId: Request Access to a Tribe
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe is public, it's not necessary to request access
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Already belong to the tribe
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe doesn't exits
      tags:
        - tribes

  /tribes/request-access-details/{TribeId}:
    get:
      security:
        - DeviceId: [ ]
      description: Get pending access request for a tribe
      operationId: Get Pending Access Request
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TribeAccessResponse'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not the owner of the tribe or tribe doesn't exits
      tags:
        - tribes

  /tribes/accept-invitation/{InvitationId}:
    get:
      security:
        - DeviceId: [ ]
      description: Accept pending invitation to the tribe by the owner.
      operationId: Accept Request
      parameters:
        - description: Unique Invitation ID
          in: path
          name: InvitationId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe or invitation not found
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not the owner of the tribe or tribe doesn't exits
      tags:
        - tribes

  /tribes/reject-invitation/{InvitationId}:
    get:
      security:
        - DeviceId: [ ]
      description: Reject a pending invitation to the tribe by the owner.
      operationId: Reject Request
      parameters:
        - description: Unique Invitation ID
          in: path
          name: InvitationId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe or invitation not found
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not the owner of the tribe or tribe doesn't exits
      tags:
        - tribes

  /tribes/members/{TribeId}:
    get:
      security:
        - DeviceId: [ ]
      description: Get tribe members
      operationId: Get Tribe Members
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TribeMemberResponse'
          description: Successful response
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You can't access to tribe info because you're not member
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe not exists
      tags:
        - tribes

  /tribes/me:
    get:
      security:
        - DeviceId: [ ]
      description: Get tribes for a current user
      parameters:
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      operationId: Get Tribes
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTribesResponse'
          description: Successful response
      tags:
        - tribes

  /videos/upload:
    post:
      security:
        - DeviceId: [ ]
      description: |
        Upload an new video.

        Video will be shared in one of these 2 places:
        - User Feed Video
        - Into a tribe

        A user only can upload a video into a tribe if user belong to them.

        The process to upload a video has two steps:

        1. Set the video properties: title, tags, etc. (calling this end-point)
        2. This end-point returns an upload url. You must use then to upload the video to them.

      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VideosUploadRequest'
      operationId: Upload Video
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadResourceResponse'
          description: Successful response
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You can't share a video in this tribe because you don't belong them.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Invalid request or missing parameters
      tags:
        - videos

  /videos/${VideoId}:
    get:
      security:
        - DeviceId: [ ]
      description: Get a temporal download URL from a Video Id.
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      operationId: Get Video
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideoResponse'
          description: Successful response
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Video not found
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You have not permissions to get this video
      tags:
        - videos

  /videos/clap/${VideoId}:
    get:
      security:
        - DeviceId: [ ]
      description: Claps for a video
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      operationId: Clap Video
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Ok
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You already clapped this video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Video not found
      tags:
        - videos

  /videos/clap/${VideoId}/clapped:
    get:
      security:
        - DeviceId: [ ]
      description: Check if video is clapped by user
      operationId: isVideoClappedByUser
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isVideoClappedByUserResponse'
          description: is video is clapped by user returns True. False otherwise.
      tags:
        - videos

  /videos/view/${VideoId}/seen:
    get:
      security:
        - DeviceId: [ ]
      description: Checks if a video was seen by user
      operationId: CheckVideoIsBookmarked
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isVideoSeenByUserResponse'
          description: Ok
      tags:
        - videos

  /videos/view/${VideoId}:
    post:
      security:
        - DeviceId: [ ]
      description: Mark a video viewed by a user with a score between 0 - 1
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      operationId: Mark Video Viewed with score
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserVideoSeenScore'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Ok
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You already marked as viewed this video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Video not found
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Invalid request or missing parameter
      tags:
        - videos

  /videos/stats/${VideoId}:
    get:
      security:
        - DeviceId: [ ]
      description: Get statistics for a video
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      operationId: Video Stats
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideosStatsResponse'
          description: Video stats for the video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Video not found
      tags:
        - videos

  /videos/main-feed:
    get:
      security:
        - DeviceId: [ ]
      description: returns 10 public videos as suggestions for an user
      operationId: Get User Main Feed
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Successful response
      tags:
        - videos

  /videos/personalized-feed:
    get:
      security:
        - DeviceId: [ ]
      description: returns 10 public videos as suggestions for an user
      operationId: Get Personalized Main Feed
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Successful response
      tags:
        - videos

  /videos/tribe/${TribeId}:
    get:
      security:
        - DeviceId: [ ]
      description: |
        Get Videos from a tribe. If user doesn't belongs to an error will be raised.
      parameters:
        - description: Unique Tribe ID
          in: path
          name: TribeId
          required: true
          schema:
            type: string
      operationId: Get Tribe Videos
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Video stats for the video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Tribe not found or you can't access
      tags:
        - videos

  /videos/me:
    get:
      security:
        - DeviceId: [ ]
      description: Get Videos that I'm was uploaded
      parameters:
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      operationId: Get Me Videos
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Video stats for the video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
      tags:
        - videos

  /videos/bookmarks:
    get:
      security:
        - DeviceId: [ ]
      description: Get Video Bookmarks from a user
      parameters:
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      operationId: Get Video Bookmarks
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VideosBookmarkResponse'
          description: Video stats for the video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
      tags:
        - videos

  /videos/bookmarks/add/${VideoId}:
    get:
      security:
        - DeviceId: [ ]
      description: Add a video to user bookmarks
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
        - description: Page number. Default is 0
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
      operationId: Add Video to Bookmarks
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Ok
        '209':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You already bookmarked this video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Video not found
      tags:
        - videos

  /videos/bookmarks/${VideoId}/bookmarked:
    get:
      security:
        - DeviceId: [ ]
      description: Checks if a video was bookmarked by user
      operationId: CheckVideoIsBookmarked
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/isVideoBookmarkedByUserResponse'
          description: Ok
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You have not access to this video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Video not found
      tags:
        - videos

  /videos/bookmarks/delete/${VideoId}:
    get:
      security:
        - DeviceId: [ ]
      description: Delete a video from bookmarks
      parameters:
        - description: Unique Bookmark ID
          in: path
          name: BookmarkId
          required: true
          schema:
            type: string
      operationId: Delete a Bookmark
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Ok
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not the owner of this bookmark
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Bookmark not found
      tags:
        - videos

  /videos/user/${UserID}:
    get:
      security:
        - DeviceId: [ ]
      description: Get Videos from the main feed of a User
      parameters:
        - description: Unique User ID
          in: path
          name: UserID
          required: true
          schema:
            type: string
      operationId: Get other User Videos
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Video stats for the video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: User not found
      tags:
        - videos

  /videos/delete/${VideoId}:
    get:
      security:
        - DeviceId: [ ]
      description: |
        Deletes an user video. User must be the owner of the video.
      parameters:
        - description: Unique Video ID
          in: path
          name: VideoId
          required: true
          schema:
            type: string
      operationId: Delete Video
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Ok
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not the owner of the video
        '204':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: Video not found
      tags:
        - videos

  /videos/delete/all:
    get:
      security:
        - DeviceId: [ ]
      description: Deletes all database videos. ONLY AN ADMIN CAN DO THIS.
      operationId: Delete All Videos
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: All videos deleted
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseMessage'
          description: You're not admin
      tags:
        - videos

  /videos/algorithm/filter-by-interest:
    get:
      security:
        - DeviceId: [ ]
      description: returns 20 videos that recommendation engine selected for the user
      operationId: REFilterByInterests
      parameters:
        - description: Page number. Default is 1
          in: query
          name: page
          required: false
          schema:
            type: integer
            default: 0
            maximum: 500
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VideoResponse'
          description: Successful response
      tags:
        - videos
        - re

  /slides/models/action:
    get:
      tags:
      - slides
      operationId: action
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/action'
    put:
      tags:
      - slides
      operationId: action
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
    post:
      tags:
      - slides
      operationId: action
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
    patch:
      tags:
      - slides
      operationId: action
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
  
  /slides/models/action/{action_id}:
    get:
      tags:
      - slides
      operationId: action/{action_id}
      parameters:
      - name: action_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
    put:
      tags:
      - slides
      operationId: action/{action_id}
      parameters:
      - name: action_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
    delete:
      tags:
      - slides
      operationId: action/{action_id}
      parameters:
      - name: action_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    patch:
      tags:
      - slides
      operationId: action/{action_id}
      parameters:
      - name: action_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/action'
  
  /slides/models/slides:
    get:
      tags:
      - slides
      operationId: slides
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/slides'
    put:
      tags:
      - slides
      operationId: slides
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slides'
    post:
      tags:
      - slides
      operationId: slides
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slides'
    patch:
      tags:
      - slides
      operationId: slides
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slides'
  
  /slides/models/slides/{slides_id}:
    get:
      tags:
      - slides
      operationId: slides/{slides_id}
      parameters:
      - name: slides_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slides'
    put:
      tags:
      - slides
      operationId: slides/{slides_id}
      parameters:
      - name: slides_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slides'
    delete:
      tags:
      - slides
      operationId: slides/{slides_id}
      parameters:
      - name: slides_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    patch:
      tags:
      - slides
      operationId: slides/{slides_id}
      parameters:
      - name: slides_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slides'
  
  /slides/models/structure:
    get:
      tags:
      - slides
      operationId: structure
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/structure'
    put:
      tags:
      - slides
      operationId: structure
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure'
    post:
      tags:
      - slides
      operationId: structure
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure'
    patch:
      tags:
      - slides
      operationId: structure
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure'
  
  /slides/models/structure/{structure_id}:
    get:
      tags:
      - slides
      operationId: structure/{structure_id}
      parameters:
      - name: structure_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure'
    put:
      tags:
      - slides
      operationId: structure/{structure_id}
      parameters:
      - name: structure_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure'
    delete:
      tags:
      - slides
      operationId: structure/{structure_id}
      parameters:
      - name: structure_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    patch:
      tags:
      - slides
      operationId: structure/{structure_id}
      parameters:
      - name: structure_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure'
  
  /slides/models/structure_1:
    get:
      tags:
      - slides
      operationId: structure1
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/structure_1'
    put:
      tags:
      - slides
      operationId: structure1
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_1'
    post:
      tags:
      - slides
      operationId: structure1
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_1'
    patch:
      tags:
      - slides
      operationId: structure1
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_1'
  
  /slides/models/structure_1/{structure_1_id}:
    get:
      tags:
      - slides
      operationId: structure1/{structure_1_id}
      parameters:
      - name: structure_1_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_1'
    put:
      tags:
      - slides
      operationId: structure1/{structure_1_id}
      parameters:
      - name: structure_1_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_1'
    delete:
      tags:
      - slides
      operationId: structure1/{structure_1_id}
      parameters:
      - name: structure_1_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    patch:
      tags:
      - slides
      operationId: structure1/{structure_1_id}
      parameters:
      - name: structure_1_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_1'
  
  /slides/models/structure_2:
    get:
      tags:
      - slides
      operationId: structure2
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/structure_2'
    put:
      tags:
      - slides
      operationId: structure2
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_2'
    post:
      tags:
      - slides
      operationId: structure2
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_2'
    patch:
      tags:
      - slides
      operationId: structure2
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_2'
  
  /slides/models/structure_2/{structure_2_id}:
    get:
      tags:
      - slides
      operationId: structure2/{structure_2_id}
      parameters:
      - name: structure_2_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_2'
    put:
      tags:
      - slides
      operationId: structure2/{structure_2_id}
      parameters:
      - name: structure_2_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_2'
    delete:
      tags:
      - slides
      operationId: structure2/{structure_2_id}
      parameters:
      - name: structure_2_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    patch:
      tags:
      - slides
      operationId: structure2/{structure_2_id}
      parameters:
      - name: structure_2_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_2'
  
  /slides/models/structure_3:
    get:
      tags:
      - slides
      operationId: structure3
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/structure_3'
    put:
      tags:
      - slides
      operationId: structure3
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_3'
    post:
      tags:
      - slides
      operationId: structure3
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_3'
    patch:
      tags:
      - slides
      operationId: structure3
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_3'
  
  /slides/models/structure_3/{structure_3_id}:
    get:
      tags:
      - slides
      operationId: structure3/{structure_3_id}
      parameters:
      - name: structure_3_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_3'
    put:
      tags:
      - slides
      operationId: structure3/{structure_3_id}
      parameters:
      - name: structure_3_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_3'
    delete:
      tags:
      - slides
      operationId: structure3/{structure_3_id}
      parameters:
      - name: structure_3_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    patch:
      tags:
      - slides
      operationId: structure3/{structure_3_id}
      parameters:
      - name: structure_3_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/structure_3'
  
  /slides/models/template:
    get:
      tags:
      - slides
      operationId: template
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/template'
    put:
      tags:
      - slides
      operationId: template
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
    post:
      tags:
      - slides
      operationId: template
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
    patch:
      tags:
      - slides
      operationId: template
      parameters:
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
  
  /slides/models/template/{template_id}:
    get:
      tags:
      - slides
      operationId: template/{template_id}
      parameters:
      - name: template_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
    put:
      tags:
      - slides
      operationId: template/{template_id}
      parameters:
      - name: template_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'
    delete:
      tags:
      - slides
      operationId: template/{template_id}
      parameters:
      - name: template_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    patch:
      tags:
      - slides
      operationId: template/{template_id}
      parameters:
      - name: template_id
        in: path
        required: true
        schema:
          type: string
      - name: X-Fields
        in: header
        description: An optional fields mask
        schema:
          type: string
          format: mask
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/template'

  /gcp/images/{image_id}:
    get:
      tags:
      - slides
      operationId: image/{image_id}
      parameters:
      - name: image_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    put:
      tags:
      - slides
      operationId: image/{image_id}
      parameters:
      - name: image_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    post:
      tags:
      - slides
      operationId: image/{image_id}
      parameters:
      - name: image_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}

  /gcp/videos/{video_id}:
    get:
      tags:
      - slides
      operationId: video/{video_id}
      parameters:
      - name: video_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    put:
      tags:
      - slides
      operationId: video/{video_id}
      parameters:
      - name: video_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}
    post:
      tags:
      - slides
      operationId: video/{video_id}
      parameters:
      - name: video_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content: {}

components:
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Device-Id
      description: |
        Each API Call that should be authenticated must include the HTTP header *Device-Id* with the **unique** device ID number.

        There's no login required. Login is implicit.

  schemas:

    ResponseMessage:
      additionalProperties: false
      type: object
      properties:
        message:
          description: text description for the message
          type: string
          maxLength: 500

    InvalidFormResponseMessage:
      type: object
      properties:
        message:
          description: text description for the message
          type: string
        errors:
          description: |
            A list of objects where keys are the field with the error and the
            value is a message describing the error.
          type: array
          items:
            type: string

    UserVideoSeenScore:
      properties:
        seen_score:
          description: user seen score. Value between 0 - 1
          type: number
      type: object


    UserResponsePublicProfile:
      properties:
        claps:
          description: Total Claps got in their videos
          type: integer
        nick:
          description: unique user nick
          type: string
        name:
          description: user name
          type: string
        sur_name:
          description: user surname
          type: string
          nullable: true
        bio:
          description: user biography
          type: string
          nullable: true
        id:
          description: unique user ID
          type: string
        photo:
          description: url to user profile photo
          type: string
          nullable: true
        following:
          description: total people that a user follows
          type: number
          default: 0
        followers:
          description: total people that follow an user
          type: number
          default: 0
      type: object

    UserRequestProfile:
      type: object
      properties:
        nick:
          description: change user nick. Only could be changed if the new nick was not already chosen by other user.
          type: string
        name:
          description: user name
          type: string
        sur_name:
          description: user surname
          type: string
        bio:
          description: user biography
          type: string

    NotificationUserAcceptedResponse:
      type: object
      properties:
        tribe_id:
          description: Tribe ID where was accepted
          type: string
        tribe_nick:
          description: Tribe Nick where was accepted
          type: string
        tribe_photo:
          description: Tribe Photo URL where was accepted
          type: string

    NotificationUserAccessRequestResponse:
      properties:
        user_id:
          description: User ID that was requested access to the tribe
          type: string
        user_nick:
          description: User Nick that was requested access to the tribe
          type: string
        user_photo:
          description: User Photo URL that was requested access to the tribe
          type: string
        tribe_id:
          description: Tribe ID where the user was requested access
          type: string
        tribe_nick:
          description: Tribe Nick where the user was requested access
          type: string
        tribe_photo:
          description: Tribe Photo where the user was requested access
          type: string

    NotificationNewMemberInTribeResponse:
      properties:
        user_id:
          description: User ID that was requested access to the tribe
          type: string
        user_nick:
          description: User Nick that was requested access to the tribe
          type: string
        user_photo:
          description: User Photo URL that was requested access to the tribe
          type: string
        tribe_id:
          description: Tribe ID where the user was requested access
          type: string
        tribe_nick:
          description: Tribe Nick where the user was requested access
          type: string
        tribe_photo:
          description: Tribe Photo where the user was requested access
          type: string

    NotificationNewVideoInTribeResponse:
      properties:
        uploaded_by_user_id:
          description: User ID that was uploaded the video
          type: string
        uploaded_by_user_nick:
          description: User Nick that was uploaded the video
          type: string
        uploaded_by_user_photo:
          description: User Photo URL that was uploaded the video
          type: string
        uploaded_to_tribe_id:
          description: Tribe ID where videos was uploaded
          type: string
        uploaded_to_tribe_nick:
          description: Tribe Nick where videos was uploaded
          type: string
        uploaded_to_tribe_photo:
          description: Tribe Photo where videos was uploaded
          type: string
        video_id:
          description: Uploaded video ID
          type: string
        video_title:
          description: Uploaded Video title
          type: string

    NotificationNewUserVideoResponse:
      properties:
        uploaded_by_user_id:
          description: User ID that was uploaded the video
          type: string
        uploaded_by_user_nick:
          description: User Nick that was uploaded the video
          type: string
        uploaded_by_user_photo:
          description: User Photo URL that was uploaded the video
          type: string
        video_id:
          description: Uploaded video ID
          type: string
        video_title:
          description: Uploaded Video title
          type: string

    NotificationsSummaryResponse:
      properties:
        id:
          description: Unique Notification ID
          type: string
        title:
          description: Summary text for the notification
          type: string
        created:
          description: |
            When follower starts following the user. Date format example: "Fri, 12 Mar 2021 13:27:47 GMT"
          type: string
        notification_type:
          description: |
            Type of notification. Currently these types of notifications are supported:

            - 1: An user was accepted into a tribe. This message is received user that was accepted into the tribe.
            - 2: An user requested access to a tribe. This message is received by a tribe owner.
            - 3: New tribe member. This message was received to all tribe members.
            - 4: New video in a tribe. This message was received to all tribe members.
            - 5: New user video. This message was received to all user followers.
          type: integer
      type: object

    UploadResourceResponse:
      additionalProperties: false
      properties:
        upload_url:
          description: URL where upload the image
          type: string
          maxLength: 500
        id:
          description: Video ID
          type: string
      type: object

    FollowedResponse:
      properties:
        followed:
          description: True if this user is followed. False otherwise
          type: boolean
      type: object

    FollowerResponse:
      properties:
        user_id:
          description: User Id whom is followed
          type: string
        follower_id:
          description: User Id of user who is the follower
          type: string
        follower_name:
          description: User full Name of user who is the follower
          type: string
        follower_photo:
          description: User Photo URL of user who is the follower
          type: string
        created:
          description: |
            When follower starts following the user. Date format example: "Fri, 12 Mar 2021 13:27:47 GMT"
          type: string
      type: object

    TribeUpdatePublicInfoResponse:
      properties:
        id:
          description: Tribe ID
          type: string
        name:
          description: Tribe name. The name is unique
          type: string
        owner_id:
          description: User ID of the tribe owner
          type: string
        owner_name:
          description: User Name of the tribe owner
          type: string
        tags:
          description: List of tags for this tribe set by the owner
          type: array
          items:
            type: string
        description:
          description: Tribe description
          type: string
        photo:
          description: URL of the Tribe photo
          type: string
        is_public:
          description: |
            Describes if Tribe will be public or private:

            - *true*: Tribe will be public
            - *false*: Tribe will be private
          type: boolean
          default: false
        created:
          description: |
            Tribe creation date. Date format example: "Fri, 12 Mar 2021 13:27:47 GMT"
          type: string
      type: object

    TribeUpdatePublicInfoRequest:
      required:
        - nick
        - name
        - description
        - is_public
      properties:
        nick:
          description: Tribe nick. MUST be unique
          type: string
        name:
          description: Tribe name
          type: string
        description:
          description: Tribe description
          type: string
        is_public:
          description: |
            Describes if Tribe will be public or private:

            - *true*: Tribe will be public
            - *false*: Tribe will be private
          type: boolean
          default: false
      type: object

    TribeCreatePublicInfoRequest:
      additionalProperties: false
      required:
        - nick
        - name
        - description
      properties:
        nick:
          description: Tribe nick. MUST be unique
          type: string
        name:
          description: Tribe name. MUST be unique
          type: string
        description:
          description: Tribe description
          type: string
        is_public:
          description: |
            Describes if Tribe will be public or private:

            - *true*: Tribe will be public
            - *false*: Tribe will be private
          type: boolean
          default: false
      type: object

    TribeAccessResponse:
      properties:
        user_nick:
          description: User nick that requests access to the tribe
          type: string
        user_id:
          description: User Id that requests access to the tribe
          type: string
        user_name:
          description: User full name that requests access to the tribe
          type: string
        user_photo:
          description: User photo URL that requests access to the tribe
          type: string
        tribe_id:
          description: Tribe Id which user requests access
          type: string
        tribe_name:
          description: Tribe name which user requests access
          type: string
        tribe_photo:
          description: Tribe photo URL which user requests access
          type: string
        created:
          description: |
            When follower starts following the user. Date format example: "Fri, 12 Mar 2021 13:27:47 GMT"
          type: string
      type: object

    TribeMemberResponse:
      properties:
        user_id:
          description: User Id that belongs to the Tribe
          type: string
        user_nick:
          description: Unique user Nick of member
          type: string
        user_name:
          description: User name that belongs to the Tribe
          type: string
        user_photo:
          description: User photo URL that belongs to the Tribe
          type: string
        tribe_id:
          description: Tribe Id which user requests access
          type: string
        tribe_name:
          description: Tribe name
          type: string
        tribe_nick:
          description: Unique Tribe Nick
          type: string
        tribe_photo:
          description: Tribe photo URL that belongs to the Tribe
          type: string
        created:
          description: |
            When follower starts following the user. Date format example: "Fri, 12 Mar 2021 13:27:47 GMT"
          type: string
      type: object

    UserTribesResponse:
      properties:
        tribe_id:
          description: Tribe Id which user requests access
          type: string
        tribe_name:
          description: Tribe name
          type: string
        tribe_nick:
          description: Unique Tribe Nick
          type: string
        tribe_photo:
          description: Tribe photo URL that belongs to the Tribe
          type: string
      type: object

    TribeCreateResponse:
      properties:
        id:
          description: Unique ID for the just created tribe
          type: string
      type: object

    VideoResponse:
      properties:
        id:
          description: Video Id
          type: string
        title:
          description: Video title
          type: string
        url:
          description: URL to download the video
          type: string
        user_id:
          description: User ID that was uploaded the video
          type: string
        user_nick:
          description: User Nick that was uploaded the video
          type: string
        user_photo:
          description: User Photo URL that was uploaded the video
          type: string
        tribe_nick:
          description: Unique Tribe ID
          type: string
        tribe_photo:
          description: Tribe photo link
          type: string
        claps:
          description: Number of claps for this video
          type: integer
        views:
          description: Number of total views for this video
          type: integer
        user_name:
          description: User name that was uploaded the video
          type: string
        uploaded:
          description: |
            Date when the video was uploaded. Date format example: "Fri, 12 Mar 2021 13:27:47 GMT"
          type: string
        gsID:
          description: gsID value as a lists of strings
          type: array
        user_company:
          description: company name
          type: string
        user_is_verified:
          description: true if user was verified. False otherwise.
          type: boolean
        user_role:
          description: user role
          type: string
        user_clapped:
          description: True if user already clapped this video. False otherwise
          type: boolean
        user_bookmarked:
          description: True if user already bookmarked this video. False otherwise
          type: boolean
        user_seen:
          description: True if user already seen this video. False otherwise
          type: boolean
        user_seen_score:
          description: user seen score. A float value from 0.0 to infinite
          type: number
          minimum: 0.0
        tags:
          description: Video tags list as a list of strings.
          type: array
      type: object

    VideosUploadRequest:
      description: Upload video requests
      required:
        - description
        - share_to
      properties:
        title:
          description: Title for the video
          type: string
        share_to:
          description: |
            Where to share this video. Two choices are available:
            - 'user' -> Share the video into User feed
            - 'tribe' -> Share the video into a tribe
          type: string
          enum: ['user', 'tribe']
        share_tribe:
          description: |
            If video will be shared into a tribe, this value will be the Tribe ID where user want to share the video.

            To share a video into a tribe, user must belong to the tribe.
          type: string
        tags:
          description: List of user tags for the video
          type: array
          items:
            type: string
      type: object

    VideosStatsResponse:
      properties:
        claps:
          description: Claps that the video had
          type: integer
        views:
          description: Views that the video had
          type: integer
        shared_to_tribes:
          description: Times that video was shared to a tribe
          type: string
        auto_tags:
          description: List of Claps AI detected tags for the video
          type: array
          items:
            type: string
        tags:
          description: List of user tags for the video
          type: array
          items:
            type: string
        sentiment:
          description: Claps AI detected sentiment
          type: string
      type: object

    VideosBookmarkResponse:
      type: object
      properties:
        id:
          description: Bookmark Id
          type: string
        user_id:
          description: User ID that was created the bookmark
          type: string
        user_nick:
          description: User Nick that was created the bookmark
          type: string
        user_photo:
          description: User Photo URL that was created the bookmark
          type: string
        video_id:
          description: Unique Video ID
          type: string
        video_title:
          description: Video title
          type: string
        created:
          description: |
            Date when the bookmark was created. Date format example: "Fri, 12 Mar 2021 13:27:47 GMT"
          type: string

    isVideoClappedByUserResponse:
      type: object
      properties:
        clapped:
          description: if video was clapped by user returns True. False otherwise.
          type: boolean

    isVideoBookmarkedByUserResponse:
      type: object
      properties:
        bookmarked:
          description: if video was bookmarked by user returns True. False otherwise.
          type: boolean

    isVideoSeenByUserResponse:
      type: object
      properties:
        seen:
          description: if video was seen by user returns True. False otherwise.
          type: boolean
        seen_score:
          description: user seen score. A float value from 0.0 to infinite
          type: number
          minimum: 0.0

    structure:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        id:
          type: string
    
    structure_1:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        image:
          type: string
        subtitle:
          type: string
        id:
          type: string
    
    structure_2:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        bullet1:
          type: string
        bullet2:
          type: string
        bullet3:
          type: string
        id:
          type: string
    
    structure_3:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        id:
          type: string
    
    template:
      type: object
      properties:
        version:
          type: string
        id:
          type: string
        colors:
          $ref: '#/components/schemas/colors'
        typo:
          $ref: '#/components/schemas/typo'
        structure:
          type: array
          items:
            $ref: '#/components/schemas/structure'
    
    colors:
      type: object
      properties:
        background:
          type: string
        graphics:
          type: string
        text_primary:
          type: string
        text_secondary:
          type: string
        id:
          type: string
    
    typo:
      type: object
      properties:
        font_family:
          type: string
        id:
          type: string
    
    action:
      type: object
      properties:
        timestamp:
          type: integer
        id:
          type: string
        structure:
          $ref: '#/components/schemas/structure'
    
    slides:
      type: object
      properties:
        version:
          type: string
        video:
          type: string
        id:
          type: string
        colors:
          $ref: '#/components/schemas/colors'
        typo:
          $ref: '#/components/schemas/typo'
        action:
          type: array
          items:
            $ref: '#/components/schemas/action'

